{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filterValue","handleFilterChange","onChange","value","PersonForm","newName","newNumber","addNumber","handleChange","handleNumberChange","onSubmit","type","Person","person","removeNumber","name","number","onClick","id","Persons","persons","filter","toLowerCase","indexOf","map","key","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setFilterValue","notificationMessage","setNotificationMessage","notificationType","setNotificationType","useEffect","console","log","personService","initialPersons","event","target","preventDefault","numberObject","includes","personToBeUpdated","find","window","confirm","returnedPerson","setTimeout","catch","error","p","concat","personToBeRemoved","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16e2b17f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({filterValue, handleFilterChange}) => {\r\n    return (\r\n    <div>\r\n          filter shown with <input onChange={handleFilterChange} value={filterValue}/>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  export default Filter","import React from 'react'\r\n\r\n\r\n\r\nconst PersonForm = ({newName, newNumber, addNumber, handleChange, handleNumberChange}) => {\r\n  return (\r\n    <form onSubmit={addNumber}>\r\n        <div>\r\n          name: <input onChange={handleChange} value={newName}/>\r\n\r\n        </div>\r\n        <div>\r\n          number: <input onChange={handleNumberChange} value={newNumber}/>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Person = ({person, removeNumber}) => {\r\n    return (\r\n      <p>{person.name} {person.number} <button onClick={() => removeNumber(person.id)}>delete</button></p>\r\n    )\r\n  }\r\n\r\n  export default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\n\r\nconst Persons = ({filterValue, persons, removeNumber}) => {\r\n    return (\r\n      <div>\r\n      {\r\n        persons.filter(person => person.name.toLowerCase().indexOf(filterValue.toLowerCase()) !== -1).map(person => <Person key={person.name} person = {person} removeNumber = {removeNumber}/>)\r\n      }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Persons","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n  getAll, \r\n  create, \r\n  update,\r\n  remove\r\n}","import React from 'react'\r\n\r\nconst Notification = ({message, type}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={type}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\nimport './App.css'\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filterValue, setFilterValue] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState('something happened...')\n  const [notificationType, setNotificationType] = useState('error')\n\n  useEffect(() => {\n    console.log('effect')\n    personService\n      .getAll()\n      .then(initialPersons => {\n        console.log('promise fulfilled')\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const handleChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilterValue(event.target.value)\n    \n  }\n\n  const addNumber = (event) => {\n    event.preventDefault()\n    const numberObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    const names = persons.map(person => person.name)\n\n    if(names.includes(newName)){\n      const personToBeUpdated = persons.find(person => person.name === newName)\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with the new one?`)){\n        personService.update(personToBeUpdated.id, numberObject)\n        .then(returnedPerson => {\n          setPersons(persons.map(person => person.name !== newName ? person : returnedPerson))\n          setNotificationMessage(`Updated number of ${returnedPerson.name}`)\n          setNotificationType('success')\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n          console.log(notificationMessage)\n        })\n        .catch(error => {\n          console.log('fail')\n          setNotificationMessage(`Information of  ${numberObject.name} has already been deleted`)\n          setNotificationType('error')\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n          setPersons(persons.filter(p => p.name !== numberObject.name))\n        })\n      }\n    }else {\n      \n      personService\n      .create(numberObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setNotificationMessage(`Added ${returnedPerson.name}`)\n        setNotificationType('success')\n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n        console.log('notification type: ', notificationType)\n        console.log(returnedPerson)\n      })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const deleteNumber = (id) => {\n    console.log('Delete number with id:', id)\n    const personToBeRemoved = persons.find(person => person.id === id)\n\n    if (window.confirm(`Do you really want to delete ${personToBeRemoved.name}?`)) { \n      personService.remove(id)\n      setPersons(persons.filter(person => person.id !== id))\n      setNotificationMessage(`Deleted number of ${personToBeRemoved.name}`)\n      setNotificationType('success')\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n    }\n\n    \n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} type={notificationType}/>\n      <Filter handleFilterChange={handleFilterChange} />\n      <h3>Add a new</h3>\n      <PersonForm newName = {newName} newNumber = {newNumber} addNumber = {addNumber} handleChange = {handleChange} handleNumberChange = {handleNumberChange} />\n      <h3>Numbers</h3>\n      <Persons persons={persons} filterValue={filterValue} removeNumber = {deleteNumber}/>\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}